{"version":3,"sources":["webpack:///./src/pages/about.js","webpack:///./src/components/header.js","webpack:///./src/components/hooks/scroll-state.js"],"names":["About","style","color","header_text","Header","props","scrolled","useScrollStatus","data-active","to","scrollBreakpoint","useState","setScrolled","useEffect","handleScroll","window","scrollY","document","addEventListener","passive","removeEventListener"],"mappings":"6FAAA,oFAEe,SAASA,IACtB,OACE,yBAAKC,MAAO,CAAEC,MAAM,SAClB,kBAAC,IAAD,CAAQC,YAAY,UACpB,uD,kCCNN,iDAmBeC,IAfA,SAACC,GAEZ,IAAMC,EAAWC,YAAgB,IAEjC,OACE,4BAAQC,cAAaF,GACnB,6BACE,4BACE,kBAAC,OAAD,CAAMG,GAAG,KAAT,qB,kCCZZ,gBA0BeF,IAxBS,SAAAG,GAAoB,MAEVC,oBAAS,GAAlCL,EAFmC,KAEzBM,EAFyB,KAqB1C,OAhBAC,qBAAU,WACR,IAAMC,EAAe,WACAC,OAAOC,QAAUN,IACjBJ,GACjBM,GAAaN,IAMjB,OAFAW,SAASC,iBAAiB,SAAUJ,EAAc,CAAEK,SAAS,IAEtD,WAELF,SAASG,oBAAoB,SAAUN,MAExC,CAACR,EAAUI,IAEPJ","file":"component---src-pages-about-js-5d874610e41ba679846d.js","sourcesContent":["import React from \"react\"\r\nimport Header from \"../components/header\"\r\nexport default function About() {\r\n  return (\r\n    <div style={{ color: `teal` }}>\r\n      <Header header_text=\"About\"/>\r\n      <p>Such wow. Very React.</p>\r\n    </div>\r\n  )\r\n}","import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport useScrollStatus from \"./hooks/scroll-state\"\r\n\r\nconst Header = (props) => {\r\n\r\n    const scrolled = useScrollStatus(10)\r\n\r\n    return (\r\n      <header data-active={scrolled}>\r\n        <nav>\r\n          <h1>\r\n            <Link to=\"/\">Bryce Hennen</Link>\r\n          </h1>\r\n        </nav>\r\n      </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import { useState, useEffect } from 'react'\r\n\r\nconst useScrollStatus = scrollBreakpoint => {\r\n  // determined if page has scrolled past a certain point\r\n  const [scrolled, setScrolled] = useState(false)\r\n\r\n  // change state on scroll\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      const isScrolled = window.scrollY > scrollBreakpoint\r\n      if (isScrolled !== scrolled) {\r\n        setScrolled(!scrolled)\r\n      }\r\n    }\r\n\r\n    document.addEventListener(\"scroll\", handleScroll, { passive: true })\r\n\r\n    return () => {\r\n      // clean up the event handler when the component unmounts\r\n      document.removeEventListener(\"scroll\", handleScroll)\r\n    }\r\n  }, [scrolled, scrollBreakpoint])\r\n\r\n  return scrolled\r\n}\r\n\r\nexport default useScrollStatus\r\n\r\n"],"sourceRoot":""}